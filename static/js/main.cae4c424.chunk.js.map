{"version":3,"sources":["components/PlanetOnList.js","components/PageChangeButtons.js","components/ListOfPlanets.js","App.js","serviceWorker.js","index.js"],"names":["StyledPlanetOnList","styled","div","_templateObject","props","isPlanetFullInfoOpen","PlanetOnListComponent","state","handleOnClick","_this","setState","_this$props$aboutPlan","this","aboutPlanet","id","name","diameter","population","surfaceWater","console","log","react_default","a","createElement","onClick","concat","react_apollo_esm","query","PLANET_ALL_INFO","variables","planetID","_ref","loading","error","data","_data$planet","planet","gravity","rotationPeriod","orbitalPeriod","climates","terrains","filmConnection","residentConnection","map","climate","terrain","films","length","film","key","title","residents","resident","React","Component","gql","_templateObject2","withApollo","StyledChangePageComponent","PageChangeButtons_templateObject","StyledPageChangeButton","button","PageChangeButtons_templateObject2","ChangePageComponent","handleOnClickNext","handleOnClickBack","_ref$isEnabled","isEnabled","isNextEnabled","isBackEnabled","disabled","numberPlanetsOnPage","StyledListOfPlanets","ListOfPlanets_templateObject","ListOfPlanetsComponent","handleFetchMore","fetchMore","updateQuery","previousResult","fetchMoreResult","newEdges","allPlanets","edges","pageInfo","__typename","Object","toConsumableArray","firstFromList","lastFromList","cursorAfter","cursorBefore","startCursor","endCursor","_this$props$data","listOfPlanetsFormServer","Fragment","_ref2","node","PlanetOnList","PageChangeButtons","ALL_PLANETS","ListOfPlanets_templateObject2","graphql","options","StyledApp","App_templateObject","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","App","ListOfPlanets","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cae4c424.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport gql from \"graphql-tag\";\r\nimport { withApollo, Query } from 'react-apollo';\r\n\r\nconst StyledPlanetOnList = styled.div`\r\n\r\n  justify-self: stretch;\r\n\r\n  @media (min-width: 461px) {\r\n    grid-column: span ${(props) => props.isPlanetFullInfoOpen ? 2 : 1};\r\n  }\r\n  grid-row: span ${(props) => props.isPlanetFullInfoOpen ? 2 : 1};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  border: solid 1px black;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 5px;\r\n  cursor: default;\r\n\r\n  h5 {\r\n    margin: 5px;\r\n    font-weight: normal;\r\n  };\r\n  h3 {\r\n    margin-top: 5px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nclass PlanetOnListComponent extends React.Component {\r\n  state = {\r\n    isPlanetFullInfoOpen: false\r\n  }\r\n\r\n\r\n\r\n  handleOnClick = () => {\r\n    this.setState({isPlanetFullInfoOpen: !this.state.isPlanetFullInfoOpen});\r\n  }\r\n\r\n  render() {\r\n    const {id, name, diameter, population, surfaceWater } = this.props.aboutPlanet;\r\n    console.log('id: ', id);\r\n    return (\r\n      <StyledPlanetOnList onClick={this.handleOnClick} isPlanetFullInfoOpen={this.state.isPlanetFullInfoOpen}>\r\n        {name ? <div><h5>Planet</h5><h3> {name}</h3></div> : null}\r\n        {<h5>Diameter: {diameter ? `${diameter} km` : \"No information\"}</h5>}\r\n        {<h5>Population: {population ? `${population} persons` : \"No information\"}</h5>}\r\n        {<h5>Water surface: {surfaceWater ? `${surfaceWater}%` : \"No information\"}</h5>}\r\n        {this.state.isPlanetFullInfoOpen ? \r\n          <Query query={PLANET_ALL_INFO} variables={{planetID: id}}>\r\n            {\r\n              ({ loading, error, data }) => {\r\n                console.log('loading, error, data: ', loading, error, data);\r\n                if (loading) return <h5>LOADING...</h5>;\r\n                if (error) return <h5>NO INFORMATION</h5>;\r\n                const { gravity, rotationPeriod, orbitalPeriod, climates, terrains, filmConnection, residentConnection } = data.planet;\r\n                return(\r\n                  <div>\r\n                    {<h5>Gravity: {gravity ? `${gravity}` : \"No information\"}</h5>}\r\n                    {<h5>Rotation Period: {rotationPeriod ? `${rotationPeriod}` : \"No information\"}</h5>}\r\n                    {<h5>Orbital Period: {orbitalPeriod ? `${orbitalPeriod}` : \"No information\"}</h5>}\r\n                    {<h5>Climates: {climates ? `${climates.map((climate)=>` ${climate}`)}` : \"No information\"}</h5>}\r\n                    {<h5>Terrains: {terrains ? `${terrains.map((terrain)=>` ${terrain}`)}` : \"No information\"}</h5>}\r\n                    {filmConnection.films.length > 0 ?\r\n                      <div>\r\n                        <hr/><h5>Films where you could see this planet:</h5>\r\n                        <ul>{filmConnection.films.map((film)=><li key={film.id}><h5>{film.title}</h5></li>)}</ul>\r\n                      </div> : null}\r\n                    {residentConnection.residents.length > 0 ? <div>\r\n                      <hr/><h5>Persons which connect to this planet:</h5>\r\n                      <ul>{residentConnection.residents.map((resident)=><li key={resident.id}><h5>{resident.name}</h5></li>)}</ul>\r\n                    </div> : null}  \r\n                  </div>\r\n                )\r\n              }\r\n            }\r\n          </Query>\r\n\r\n          : null}\r\n      </StyledPlanetOnList>\r\n    );\r\n  }\r\n}\r\n\r\nconst PLANET_ALL_INFO = gql`\r\nquery Planet(\r\n  $planetID: ID\r\n) {\r\n  planet(id: $planetID) {\r\n    id\r\n    name\r\n    diameter\r\n    rotationPeriod\r\n    orbitalPeriod\r\n    gravity\r\n    population\r\n    climates\r\n    terrains\r\n    surfaceWater\r\n    filmConnection {\r\n      films {\r\n        id\r\n        title\r\n      }\r\n    }\r\n    residentConnection {\r\n      residents {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\nexport default withApollo(PlanetOnListComponent);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledChangePageComponent = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nconst StyledPageChangeButton = styled.button`\r\n  &:active {\r\n    background-color: green;\r\n  }\r\n`;\r\n\r\nconst ChangePageComponent = ({\r\n  handleOnClickNext,\r\n  handleOnClickBack,\r\n  isEnabled: {isNextEnabled, isBackEnabled}\r\n}) => {\r\n\r\n  return (\r\n    <StyledChangePageComponent>\r\n      <StyledPageChangeButton onClick={handleOnClickBack}\r\n      disabled={!isBackEnabled}>\r\n        Previous Page\r\n      </StyledPageChangeButton>\r\n\r\n      <StyledPageChangeButton\r\n        onClick={handleOnClickNext}\r\n        disabled={!isNextEnabled}\r\n      >\r\n        Next Page\r\n      </StyledPageChangeButton>\r\n    </StyledChangePageComponent>\r\n  );\r\n};\r\n\r\nexport default ChangePageComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PlanetOnListComponent from \"./PlanetOnList\";\r\nimport ChangePageComponent from \"./PageChangeButtons\";\r\nimport gql from \"graphql-tag\";\r\nimport { graphql } from \"react-apollo\";\r\n\r\nconst numberPlanetsOnPage = 10;\r\n\r\nconst StyledListOfPlanets = styled.div`\r\n\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(220px,  1fr));\r\n  ${'' /* grid-template-row: repeat(auto-fit, minmax(800px,  4fr)); */}\r\n  ${'' /* border: solid 1px black; */}\r\n  ${'' /* border-radius: 5px; */}\r\n  ${'' /* padding: 10px; */}\r\n  margin: 10px 5px 10px 5px;\r\n`;\r\n\r\nclass ListOfPlanetsComponent extends React.Component {\r\n\r\n  handleFetchMore = (variables) => {\r\n    this.props.data.fetchMore({\r\n      variables: variables,\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        const newEdges = fetchMoreResult.allPlanets.edges;\r\n        const pageInfo = fetchMoreResult.allPlanets.pageInfo;\r\n        return newEdges.length\r\n          ? {\r\n              allPlanets: {\r\n                __typename: previousResult.allPlanets.__typename,\r\n                edges: [...newEdges],\r\n                pageInfo\r\n              }\r\n            }\r\n          : previousResult;\r\n      }\r\n    });\r\n  }\r\n\r\n  handleOnClickBack = () => {\r\n    const variables = {\r\n      firstFromList: null,\r\n      lastFromList: numberPlanetsOnPage,\r\n      cursorAfter: null,\r\n      cursorBefore: this.props.data.allPlanets.pageInfo.startCursor\r\n    };\r\n    this.handleFetchMore(variables);\r\n  }\r\n\r\n  handleOnClickNext = () => {\r\n    const variables = {\r\n      firstFromList: numberPlanetsOnPage,\r\n      lastFromList: null,\r\n      cursorAfter: this.props.data.allPlanets.pageInfo.endCursor,\r\n      cursorBefore: null\r\n    };\r\n    this.handleFetchMore(variables);\r\n  }\r\n\r\n  render() {\r\n    let { loading, error } = this.props.data;\r\n    const { allPlanets } = this.props.data;\r\n    if (loading) return <h1>LOADING...</h1>;\r\n    if (error) return console.log(\"ERROR: \", this.props.data.error);\r\n    const listOfPlanetsFormServer = allPlanets.edges;\r\n    // const isPreviousPage = allPlanets.pageInfo.hasPreviousPage;\r\n    // const isNextPage = allPlanets.pageInfo.hasNextPage;\r\n    return (\r\n      <React.Fragment>\r\n        <StyledListOfPlanets>\r\n          {listOfPlanetsFormServer.map(({ node }) => (\r\n            <PlanetOnListComponent\r\n              key={node.id}\r\n              aboutPlanet={node}\r\n              \r\n            />\r\n          ))}\r\n        </StyledListOfPlanets>\r\n\r\n        <ChangePageComponent\r\n          handleOnClickBack={this.handleOnClickBack}\r\n          handleOnClickNext={this.handleOnClickNext}\r\n          isEnabled={{ isBackEnabled: true, isNextEnabled: true }}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst ALL_PLANETS = gql`\r\n  query Planets(\r\n    $firstFromList: Int,\r\n    $lastFromList: Int,\r\n    $cursorAfter: String,\r\n    $cursorBefore: String,\r\n  ) {\r\n    allPlanets(\r\n      first: $firstFromList,\r\n      last: $lastFromList,\r\n      after: $cursorAfter,\r\n      before: $cursorBefore,\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          name\r\n          diameter\r\n          population\r\n          surfaceWater\r\n        }\r\n        cursor\r\n      }\r\n      pageInfo {\r\n        startCursor\r\n        endCursor\r\n        hasNextPage\r\n        hasPreviousPage\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default graphql(ALL_PLANETS, {\r\n  options: () => ({\r\n    variables: {\r\n      firstFromList: numberPlanetsOnPage,\r\n      lastFromList: null,\r\n      cursorAfter: null,\r\n      cursorBefore: null\r\n    }\r\n  })\r\n})(ListOfPlanetsComponent);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ListOfPlanetsComponent from \"./components/ListOfPlanets\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\n\r\nconst StyledApp = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"https://swapi.apis.guru/\"\r\n});\r\n\r\nexport const client = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <StyledApp>\r\n          <ListOfPlanetsComponent />\r\n        </StyledApp>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}